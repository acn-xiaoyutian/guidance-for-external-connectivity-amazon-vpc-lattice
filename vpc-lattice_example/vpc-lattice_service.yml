AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Lattice service - Example (Custom domain optional)

Parameters:
  CustomDomainName:
    Type: String
    Default: ""                         # ← 为空表示不使用自定义域名
    Description: Custom Domain Name (VPC Lattice service). Leave empty to skip.
  CertificateArn:
    Type: String
    Default: ""                         # ← 为空表示不使用自定义域名
    Description: Certificate ARN for HTTPS. Leave empty to skip.

Conditions:
  UseCustomDomain:
    Fn::And:
      - Fn::Not: [ Fn::Equals: [ !Ref CustomDomainName, "" ] ]
      - Fn::Not: [ Fn::Equals: [ !Ref CertificateArn, "" ] ]

Resources:
  # ---------- VPC LATTICE RESOURCES ----------
  VPCLatticeServiceNetwork:
    Type: AWS::VpcLattice::ServiceNetwork
    Properties:
      Name: vpc-lattice-service-network
      AuthType: AWS_IAM

  VPCLatticeServiceNetworkAuthPolicy:
    Type: AWS::VpcLattice::AuthPolicy
    Properties:
      ResourceIdentifier: !Ref VPCLatticeServiceNetwork
      Policy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"

  VPCLatticeService:
    Type: AWS::VpcLattice::Service
    Properties:
      Name: vpc-lattice-service
      AuthType: AWS_IAM
      # 只有在提供了域名+证书时才设置，反之不设置（使用系统生成域名）
      CustomDomainName: !If [ UseCustomDomain, !Ref CustomDomainName, !Ref "AWS::NoValue" ]
      CertificateArn:   !If [ UseCustomDomain, !Ref CertificateArn,   !Ref "AWS::NoValue" ]

  VPCLatticeServiceAuthPolicy:
    Type: AWS::VpcLattice::AuthPolicy
    Properties:
      ResourceIdentifier: !Ref VPCLatticeService
      Policy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"

  VPCLatticeLambdaTarget:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Name: lambda-target
      Type: LAMBDA
      Targets:
        - Id: !GetAtt LambdaFunction.Arn

  # 允许 VPC Lattice 调用该 Lambda
  LambdaPermissionForVPCLattice:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: vpc-lattice.amazonaws.com
      SourceArn: !GetAtt VPCLatticeLambdaTarget.Arn

  # 默认监听器：如果有自定义域名则用 HTTPS/443，否则 HTTP/80
  VPCLatticeListener:
    Type: AWS::VpcLattice::Listener
    Properties:
      Name: default-listener
      ServiceIdentifier: !Ref VPCLatticeService
      Protocol: !If [ UseCustomDomain, HTTPS, HTTP ]
      Port:     !If [ UseCustomDomain, 443,   80 ]
      DefaultAction:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref VPCLatticeLambdaTarget
              Weight: 1

  VPCLatticeServiceAssociation:
    Type: AWS::VpcLattice::ServiceNetworkServiceAssociation
    Properties:
      ServiceIdentifier: !Ref VPCLatticeService
      ServiceNetworkIdentifier: !Ref VPCLatticeServiceNetwork

  # ---------- LAMBDA FUNCTION ----------
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ sts:AssumeRole ]
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunction}
      RetentionInDays: 7

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Return the AWS Region where this Lambda runs."
      Runtime: python3.10
      Timeout: 10
      Role: !GetAtt LambdaFunctionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |-
          import json, logging, os
          log = logging.getLogger("handler")
          log.setLevel(logging.INFO)
          def lambda_handler(event, context):
              try:
                  region = os.environ.get('AWS_REGION')
                  log.info("Received event: %s", json.dumps(event))
                  return {"statusCode": 200, "statusDescription": "200 OK", "body": json.dumps({"region": region,"message": "Hello from VPC Lattice"})}
              except Exception as e:
                  log.exception("whoops")
                  return {"statusCode": 500, "statusDescription": "500 Internal Server Error", "body": "Server error - check lambda logs\n"}

Outputs:
  VPCLatticeServiceNetwork:
    Value: !Ref VPCLatticeServiceNetwork
    Description: VPC Lattice service network ID
  VPCLatticeServiceGeneratedDomainName:
    Value: !GetAtt VPCLatticeService.DnsEntry.DomainName
    Description: VPC Lattice service generated domain name (when no custom domain)
